<?xml version="1.0" encoding="utf-8"?>
<CodeTemplates version="3.0">
  <CodeTemplate version="2.0">
    <Header>
      <_Group>benday</_Group>
      <Version />
      <MimeType>text/x-csharp</MimeType>
      <Shortcut>dbcf</Shortcut>
      <_Description>Create DbContextFactory class</_Description>
      <TemplateType>Expansion</TemplateType>
    </Header>
    <Variables>
      <Variable name="DbContextClassName" isEditable="false" isIdentifier="true">
        <Default>DbContextClassName</Default>
      </Variable>
      <Variable name="DbContextName">
        <Default>db-context-name</Default>
      </Variable>
    </Variables>
    <Code><![CDATA[
      $end$
      /*
      using Microsoft.EntityFrameworkCore;
      using Microsoft.EntityFrameworkCore.Design;
      using Microsoft.Extensions.Configuration;
      using System.IO;
      */
      public class $DbContextName$DesignTimeDbContextFactory : IDesignTimeDbContextFactory<$DbContextName$DbContext>
{
    public $DbContextName$DbContext Create()
    {
        var environmentName = Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT");

        var basePath = AppContext.BaseDirectory;

        return Create(basePath, environmentName);
    }

    public $DbContextName$DbContext CreateDbContext(string[] args)
    {
        return Create(
            Directory.GetCurrentDirectory(),
            Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT"));
    }

    private $DbContextName$DbContext Create(string basePath, string environmentName)
    {
        var builder = new ConfigurationBuilder()
            .SetBasePath(basePath)
            .AddJsonFile("appsettings.json")
            .AddJsonFile(
                String.Format("appsettings.{0}.json", environmentName),
                true)
            .AddEnvironmentVariables();

        var config = builder.Build();

        var connstr = config.GetConnectionString("default");

        if (String.IsNullOrWhiteSpace(connstr) == true)
        {
            throw new InvalidOperationException(
                "Could not find a connection string named 'default'.");
        }
        else
        {
            return Create(connstr);
        }
    }

    private $DbContextName$DbContext Create(string connectionString)
    {
        if (string.IsNullOrEmpty(connectionString))
            throw new ArgumentException(
                String.Format("{0} is null or empty.", nameof(connectionString)),
                nameof(connectionString));

        var optionsBuilder =
            new DbContextOptionsBuilder<$DbContextName$DbContext>();

        Console.WriteLine(
            "MyDesignTimeDbContextFactory.Create(string): Connection string: {0}",
            connectionString);

        optionsBuilder.UseSqlServer(connectionString);

        return new $DbContextName$DbContext(optionsBuilder.Options);
    }
}]]></Code>
  </CodeTemplate>
</CodeTemplates>
