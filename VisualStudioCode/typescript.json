{
	// Place your snippets for typescript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"arrange act assert": {
		"prefix": "aaa",
		"body": [
		  "// arrange",
		  "$0",
		  "// act",
		  "",
		  "// assert",
		  ""
		],
		"description": "String.Format"
	  },
	  "angular field": {
		"prefix": "ngf",
		"body": [
		  "public readonly fieldName${1/(.*)/${1:/pascalcase}/}: string = '${1/(.*)/${1:/camelcase}/}';",
		  "public get ${1/(.*)/${1:/camelcase}/}(): AbstractControl | null {",
		  "return this.theForm.get(this.fieldName${1/(.*)/${1:/pascalcase}/});",
		  "}",
		  "$0"		  
		],
		"description": "angular field definition in a component"
	  },
	  "angular field assertion": {
		"prefix": "ngaf",
		"body": [
		  "it('should have a form control for ${1/(.*)/${1:/camelcase}/}', () => {",
			"systemUnderTest.ngOnInit();",
		"",
			"TestUtilities.assertFormControl(",
			  "systemUnderTest.${1/(.*)/${1:/camelcase}/},",
			  "systemUnderTest.theForm.get(systemUnderTest.fieldName${1/(.*)/${1:/pascalcase}/})",
			");",
		  "});",
		  "$0"
		],
		"description": "angular field definition assertion in spec"
	  },
}